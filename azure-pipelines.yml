trigger:
  - master
variables:
  - name: cmake.commonArgs
    value: >-
        -DCUTTLEFISH_FORCE_INTERNAL_FREEIMAGE=ON -DCMAKE_FIND_ROOT_PATH=$(dependency.location)
        -DCMAKE_PREFIX_PATH=$(dependency.location)
        -DCMAKE_INSTALL_PREFIX=$(Build.BinariesDirectory)/cuttlefish
  - group: Common
jobs:
  - job: Linux
    pool:
        vmImage: ubuntu-20.04
    workspace:
        clean: all
    strategy:
        matrix:
            static:
                lib.type: Static
                cmake.args: -DCUTTLEFISH_SHARED=OFF
                ispc: 0
            shared:
                lib.type: Shared
                cmake.args: -DCUTTLEFISH_SHARED=ON
                ispc: 0
            static_ispc:
                lib.type: Static
                cmake.args: -DCUTTLEFISH_SHARED=OFF -DCUTTLEFISH_ISPC_PATH=$(Build.SourcesDirectory)/ispc-v$(ispc.version)-linux/bin/ispc
                ispc: 1
                artifact:
            shared_ispc:
                lib.type: Shared
                cmake.args: -DCUTTLEFISH_SHARED=ON -DCUTTLEFISH_ISPC_PATH=$(Build.SourcesDirectory)/ispc-v$(ispc.version)-linux/bin/ispc
                ispc: 1
                artifact: 1
    steps:
      - script: |
            git submodule update --init
            sudo apt-get update
            sudo apt-get -y install doxygen
            if [ $(ispc) -eq 1 ]; then
                curl -L https://github.com/ispc/ispc/releases/download/v$(ispc.version)/ispc-v$(ispc.version)-linux.tar.gz -o ispc.tar.gz
                tar xzf ispc.tar.gz
            fi
        displayName: Download submodules
        workingDirectory: $(Build.SourcesDirectory)
      - script: |
            git clone https://github.com/google/googletest.git googletest-code
            cd googletest-code
            git checkout $(gtest.version)
            mkdir build
            cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(dependency.location)
            cmake --build . -j $(cores.count)
            cmake --build . --target install
        displayName: Build gtest
        workingDirectory: $(Build.BinariesDirectory)
      - script: |
            mkdir Debug
            cd Debug
            cmake -DCMAKE_BUILD_TYPE=Debug $(cmake.commonArgs) $(cmake.args) $(Build.SourcesDirectory)
            cmake --build . -j $(cores.count)
        displayName: Build debug
        workingDirectory: $(Build.BinariesDirectory)
      - script: |
            ctest
        displayName: Run tests debug
        workingDirectory: $(Build.BinariesDirectory)/Debug
        continueOnError: true
        timeoutInMinutes: 5
      - task: PublishTestResults@2
        inputs:
            testResultsFormat: JUnit
            testResultsFiles: '*.xml'
            searchFolder: $(Common.TestResultsDirectory)
            failTaskOnFailedTests: true
            testRunTitle: Linux-$(lib.type)-Debug
            buildConfiguration: $(lib.type)-Debug
        displayName: Publish test results debug
      - script: rm -rf $(Common.TestResultsDirectory)/*
        displayName: Clear test results
      - script: |
            mkdir Release
            cd Release
            cmake -DCMAKE_BUILD_TYPE=Release $(cmake.commonArgs) $(cmake.args) $(Build.SourcesDirectory)
            cmake --build . -j $(cores.count)
        displayName: Build release
        workingDirectory: $(Build.BinariesDirectory)
      - script: |
            ctest
        displayName: Run tests release
        workingDirectory: $(Build.BinariesDirectory)/Release
        continueOnError: true
        timeoutInMinutes: 5
      - task: PublishTestResults@2
        inputs:
            testResultsFormat: JUnit
            testResultsFiles: '*.xml'
            searchFolder: $(Common.TestResultsDirectory)
            failTaskOnFailedTests: true
            testRunTitle: Linux-$(lib.type)-Release
            buildConfiguration: (lib.type)-Release
        displayName: Publish test results release
      - script: |
            cmake --build Release --target install
            tar czf cuttlefish-linux.tar.gz cuttlefish
        displayName: Package artifact
        workingDirectory: $(Build.BinariesDirectory)
        condition: eq(variables['artifact'], 1)
      - publish: $(Build.BinariesDirectory)/cuttlefish-linux.tar.gz
        condition: eq(variables['artifact'], 1)
        artifact: Linux
        displayName: Publish artifact
  - job: Mac
    pool:
        vmImage: macos-latest
    workspace:
        clean: all
    strategy:
        matrix:
            static:
                lib.type: Static
                cmake.args: >-
                    -GXcode -DCUTTLEFISH_SHARED=OFF -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
                    -DCMAKE_OSX_DEPLOYMENT_TARGET=10.14
                ispc: 0
            shared:
                lib.type: Shared
                cmake.args: >-
                    -GXcode -DCUTTLEFISH_SHARED=ON -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
                    -DCMAKE_OSX_DEPLOYMENT_TARGET=10.14
                ispc: 0
            static_ispc:
                lib.type: Static
                cmake.args: >-
                    -GXcode -DCUTTLEFISH_SHARED=OFF -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
                    -DCMAKE_OSX_DEPLOYMENT_TARGET=10.14
                    -DCUTTLEFISH_ISPC_PATH=$(Build.SourcesDirectory)/ispc-v$(ispc.version)-macOS/bin/ispc
                ispc: 1
            shared_ispc:
                lib.type: Shared
                cmake.args: >-
                    -GXcode -DCUTTLEFISH_SHARED=ON -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
                    -DCMAKE_OSX_DEPLOYMENT_TARGET=10.14
                    -DCUTTLEFISH_ISPC_PATH=$(Build.SourcesDirectory)/ispc-v$(ispc.version)-macOS/bin/ispc
                ispc: 1
                artifact: 1
    steps:
      - script: |
            git submodule update --init
            brew install doxygen
            if [ $(ispc) -eq 1 ]; then
                curl -L https://github.com/ispc/ispc/releases/download/v$(ispc.version)/ispc-v$(ispc.version)-macOS.tar.gz -o ispc.tar.gz
                tar xzf ispc.tar.gz
            fi
        displayName: Download submodules
        workingDirectory: $(Build.SourcesDirectory)
      - script: |
            git clone https://github.com/google/googletest.git googletest-code
            cd googletest-code
            git checkout $(gtest.version)
            mkdir build
            cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release "-DCMAKE_OSX_ARCHITECTURES=arm64;x86_64" \
                -DCMAKE_INSTALL_PREFIX=$(dependency.location)
            cmake --build . -j $(cores.mac.count)
            cmake --build . --target install
        displayName: Build gtest
        workingDirectory: $(Build.BinariesDirectory)
      - script: |
            cmake $(cmake.commonArgs) $(cmake.args) $(Build.SourcesDirectory)
        displayName: Run CMake
        workingDirectory: $(Build.BinariesDirectory)
      - script: |
            cmake --build . --config Debug
        displayName: Build debug
        workingDirectory: $(Build.BinariesDirectory)
      - script: |
            ctest -C Debug
        displayName: Run tests debug
        workingDirectory: $(Build.BinariesDirectory)
        continueOnError: true
        timeoutInMinutes: 5
      - task: PublishTestResults@2
        inputs:
            testResultsFormat: JUnit
            testResultsFiles: '*.xml'
            searchFolder: $(Common.TestResultsDirectory)
            failTaskOnFailedTests: true
            testRunTitle: Mac-$(lib.type)-Debug
            buildConfiguration: $(lib.type)-Debug
        displayName: Publish test results debug
      - script: rm -r $(Common.TestResultsDirectory)/*
        displayName: Clear test results
      - script: |
            cmake --build . --config Release
        displayName: Build release
        workingDirectory: $(Build.BinariesDirectory)
      - script: |
            ctest -C Release
        displayName: Run tests release
        workingDirectory: $(Build.BinariesDirectory)
        continueOnError: true
        timeoutInMinutes: 5
      - task: PublishTestResults@2
        inputs:
            testResultsFormat: JUnit
            testResultsFiles: '*.xml'
            searchFolder: $(Common.TestResultsDirectory)
            failTaskOnFailedTests: true
            testRunTitle: Mac-$(lib.type)-Release
            buildConfiguration: (lib.type)-Release
        displayName: Publish test results release
      - script: |
            cmake -DCMAKE_BUILD_WITH_INSTALL_RPATH=ON $(Build.SourcesDirectory)
        displayName: Fixup install path
        workingDirectory: $(Build.BinariesDirectory)
      - script: |
            cmake --build . --config Release --target install
            tar czf cuttlefish-mac.tar.gz cuttlefish
        displayName: Package artifact
        workingDirectory: $(Build.BinariesDirectory)
        condition: eq(variables['artifact'], 1)
      - publish: $(Build.BinariesDirectory)/cuttlefish-mac.tar.gz
        condition: eq(variables['artifact'], 1)
        artifact: Mac
        displayName: Publish artifact
  - job: Windows
    pool:
        vmImage: windows-latest
    workspace:
        clean: all
    strategy:
        matrix:
            win32_static:
                arch: Win32
                lib.type: Static
                cmake.args: -DCUTTLEFISH_SHARED=OFF
                ispc: 0
            win32_shared:
                arch: Win32
                lib.type: Shared
                cmake.args: -DCUTTLEFISH_SHARED=ON
                ispc: 0
            win64_static:
                arch: x64
                lib.type: Static
                cmake.args: -DCUTTLEFISH_SHARED=OFF
                ispc: 0
            win64_shared:
                arch: x64
                lib.type: Shared
                cmake.args: -DCUTTLEFISH_SHARED=ON
                ispc: 0
            win32_static_ispc:
                arch: Win32
                lib.type: Static
                cmake.args: -DCUTTLEFISH_SHARED=OFF -DCUTTLEFISH_ISPC_PATH=$(Build.SourcesDirectory)/ispc-v$(ispc.version)-windows/bin/ispc.exe
                ispc: 1
            win32_shared_ispc:
                arch: Win32
                lib.type: Shared
                cmake.args: -DCUTTLEFISH_SHARED=ON -DCUTTLEFISH_ISPC_PATH=$(Build.SourcesDirectory)/ispc-v$(ispc.version)-windows/bin/ispc.exe
                ispc: 1
                artifact: win32
            win64_static_ispc:
                arch: x64
                lib.type: Static
                cmake.args: -DCUTTLEFISH_SHARED=OFF -DCUTTLEFISH_ISPC_PATH=$(Build.SourcesDirectory)/ispc-v$(ispc.version)-windows/bin/ispc.exe
                ispc: 1
            win64_shared_ispc:
                arch: x64
                lib.type: Shared
                cmake.args: -DCUTTLEFISH_SHARED=ON -DCUTTLEFISH_ISPC_PATH=$(Build.SourcesDirectory)/ispc-v$(ispc.version)-windows/bin/ispc.exe
                ispc: 1
                artifact: win64
    steps:
      - bash: |
            git submodule update --init
            if [ $(ispc) -eq 1 ]; then
                curl -L https://github.com/ispc/ispc/releases/download/v$(ispc.version)/ispc-v$(ispc.version)-windows.zip -o ispc.zip
                unzip ispc.zip
            fi
        displayName: Download submodules
        workingDirectory: $(Build.SourcesDirectory)
      - bash: |
            git clone https://github.com/google/googletest.git googletest-code
            cd googletest-code
            git checkout $(gtest.version)
            mkdir build
        displayName: Checkout gtest
        workingDirectory: $(Build.BinariesDirectory)
      - script: |
            cmake .. -DCMAKE_INSTALL_PREFIX=$(dependency.location) -Dgtest_force_shared_crt=ON ^
                -A $(arch) -T v141 -DCMAKE_DEBUG_POSTFIX=d
            cmake --build . --config Debug
            cmake --build . --config Debug --target install
            cmake --build . --config Release
            cmake --build . --config Release --target install
        displayName: Build gtest
        workingDirectory: $(Build.BinariesDirectory)/googletest-code/build
      - script: |
            cmake $(cmake.commonArgs) $(cmake.args) -A $(arch) -T v141 $(Build.SourcesDirectory)
        workingDirectory: $(Build.BinariesDirectory)
        displayName: Run CMake
      - script: |
            cmake --build . --config Debug
        workingDirectory: $(Build.BinariesDirectory)
        displayName: Build debug
      - script: |
            ctest -C Debug
        workingDirectory: $(Build.BinariesDirectory)
        displayName: Run tests debug
        continueOnError: true
        timeoutInMinutes: 5
      - task: PublishTestResults@2
        inputs:
            testResultsFormat: JUnit
            testResultsFiles: '*.xml'
            searchFolder: $(Common.TestResultsDirectory)
            failTaskOnFailedTests: true
            testRunTitle: Windows-$(arch)-$(lib.type)
            buildPlatform: $(arch)
            buildConfiguration: $(lib.type)-Debug
        displayName: Publish test results debug
      - bash: rm -r *
        displayName: Clear test results
        workingDirectory: $(Common.TestResultsDirectory)
      - script: |
            cmake --build . --config Release
        workingDirectory: $(Build.BinariesDirectory)
        displayName: Build release
      - script: |
            ctest -C Release
        workingDirectory: $(Build.BinariesDirectory)
        displayName: Run tests release
        continueOnError: true
        timeoutInMinutes: 5
      - task: PublishTestResults@2
        inputs:
            testResultsFormat: JUnit
            testResultsFiles: '*.xml'
            searchFolder: $(Common.TestResultsDirectory)
            failTaskOnFailedTests: true
            testRunTitle: Windows-$(arch)-$(lib.type)
            buildPlatform: $(arch)
            buildConfiguration: $(lib.type)-Release
        displayName: Publish test results release
      - script: |
            cmake --build . --config Release --target install
            7z a -tzip cuttlefish-$(artifact).zip cuttlefish
        workingDirectory: $(Build.BinariesDirectory)
        condition: ne(variables['artifact'], '')
        displayName: Package artifact
      - publish: $(Build.BinariesDirectory)/cuttlefish-$(artifact).zip
        condition: ne(variables['artifact'], '')
        artifact: $(artifact)
        displayName: Publish artifact

# vim: ts=4 sts=4 sw=4 et
